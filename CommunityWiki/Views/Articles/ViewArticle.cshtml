@model CommunityWiki.Models.Articles.ArticleViewModel
@{
    ViewData["Title"] = Model.Title;
}

<div class="pull-right">
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
</div>
<div class="clearfix"></div>

<div class="article-voting">
    <ul class="list-inline">
        <li>
            <h3 class="article-score">@Model.Score</h3>
        </li>
        <li>
            <h4>
                <a href="#" class="btn-vote vote-up" data-vote-type="UpVote">
                    <span class="glyphicon glyphicon-thumbs-up @(Model.Voting.UserHasUpVoted ? "voted text-success" : "")"></span>
                </a>
            </h4>
        </li>
        <li>
            <h4>
                <a href="#" class="btn-vote vote-down" data-vote-type="DownVote">
                    <span class="glyphicon glyphicon-thumbs-down @(Model.Voting.UserHasDownVoted ? "voted text-danger" : "")"></span>
                </a>
            </h4>
        </li>
    </ul>
</div>

<div class="article-status-labels">
    <article-status Article="Model" />
</div>

<div class="article-body">
    @Html.Raw(Model.Body)
</div>

@if (Model.Revisions.Any())
{
    <hr />
    <h4>Revisions (@Model.RevisionCount)</h4>

    <table class="table table-condensed table-striped revisions">
        <tr>
            <th style="width: 10%">Date</th>
            <th style="width: 15%">Author</th>
            <th style="width: 15%">Score (at rev)</th>
            <th style="width: 50%">Comment</th>
            <th style="width: 10%"></th>
        </tr>
        @foreach(var rev in Model.Revisions)
        {
            <tr>
                <td>@rev.RevisionDate.ToString("d")</td>
                <td>@rev.RevisionUserName</td>
                <td>@rev.Score</td>
                <td>@rev.Comment</td>
                <td><a asp-action="CompareRevision" asp-route-articleId="@Model.Id" asp-route-revisionId="@rev.Id">Compare</a></td>
            </tr>
        }
    </table>
}

<form asp-action="Delete" asp-route-id="@Model.Id">
    <button type="submit" class="btn btn-danger btn-delete-article">Delete</button>
</form>

@section scripts
{
    <script>
        $(document).ready(function () {
            $('.btn-delete-article').on('click', function (e) {
                if (!confirm('Are you sure you want to delete this article?')) {
                    e.preventDefault();
                }
            });

            var votingData = @(Html.Raw(Model.Voting.Serialize()));

            $(document).on('click', '.btn-vote', function (e) {
                e.preventDefault();

                if (!votingData.userCanVote) {
                    return;
                }

                var $btn = $(this),
                    $btnIcon = $(this).find('.glyphicon'),
                    $spnArticleScore = $('.article-score'),
                    voteType = $btn.data('voteType');

                if (!votingData.userHasVoted) {
                    var data = {
                        articleId: @Model.Id,
                        voteType: voteType
                    };

                    $.ajax({
                        url: '@Url.Action("Create", "Votes")',
                        type: 'POST',
                        data: data,
                        success: function (result) {
                            $spnArticleScore.text(result.score);
                            votingData.userHasVoted = true;

                            if (voteType === 'UpVote') {
                                $btnIcon.addClass('text-success');
                                votingData.userHasUpVoted = true;
                            } else if(voteType === 'DownVote'){
                                $btnIcon.addClass('text-danger');
                                votingData.userHasDownVoted = true;
                            }
                        }
                    });
                } else if ((voteType === 'UpVote' && votingData.userHasUpVoted) || (voteType === 'DownVote' && votingData.userHasDownVoted)) {
                    $.ajax({
                        url: '@Url.Action("Delete", "Votes")',
                        type: 'DELETE',
                        data: {
                            articleId: @Model.Id,
                            voteType: voteType
                        },
                        success: function (result) {
                            console.log(result);
                            $btnIcon.removeClass('text-success text-danger');
                            $spnArticleScore.text(result.score);
                            votingData.userHasVoted = false;
                            votingData.userHasUpVoted = false;
                            votingData.userHasDownVoted = false;
                        }

                    })
                }
            });
        });
    </script>
}